# Copyright 2011 Free Software Foundation, Inc.
#
# This file was generated by gr_modtool, a tool from the GNU Radio framework
# This file is a part of gr-sandia_utils
#
# SPDX-License-Identifier: GPL-3.0-or-later
#

########################################################################
# Include python install macros
########################################################################
include(GrPython)
if(NOT PYTHONINTERP_FOUND)
    return()
endif()

add_subdirectory(bindings)

########################################################################
# Install python sources
########################################################################
GR_PYTHON_INSTALL(
    FILES
    __init__.py
    file_monitor.py
    max_every_n.py
    message_file_debug.py
    python_interface_sink.py
    python_message_interface.py
    # uhd_timed_cordic_emulator.py # waiting on timing utils...
    file_archiver.py
    csv_writer.py
    csv_reader.py
    rftap_encap.py
    sigmf_meta_writer.py DESTINATION ${GR_PYTHON_DIR}/sandia_utils
)

########################################################################
# Handle the unit tests
########################################################################
include(GrTest)

set(GR_TEST_TARGET_DEPS gnuradio-sandia_utils)
set(GR_TEST_PYTHON_DIRS ${CMAKE_BINARY_DIR}/swig)
GR_ADD_TEST(qa_interleaved_short_to_complex ${PYTHON_EXECUTABLE} ${CMAKE_CURRENT_SOURCE_DIR}/qa_interleaved_short_to_complex.py)
GR_ADD_TEST(qa_complex_to_interleaved_short ${PYTHON_EXECUTABLE} ${CMAKE_CURRENT_SOURCE_DIR}/qa_complex_to_interleaved_short.py)
GR_ADD_TEST(qa_block_buffer ${PYTHON_EXECUTABLE} ${CMAKE_CURRENT_SOURCE_DIR}/qa_block_buffer.py)
GR_ADD_TEST(qa_file_archiver ${PYTHON_EXECUTABLE} ${CMAKE_CURRENT_SOURCE_DIR}/qa_file_archiver.py)
GR_ADD_TEST(qa_file_monitor ${PYTHON_EXECUTABLE} ${CMAKE_CURRENT_SOURCE_DIR}/qa_file_monitor.py)
GR_ADD_TEST(qa_csv_writer ${PYTHON_EXECUTABLE} ${CMAKE_CURRENT_SOURCE_DIR}/qa_csv_writer.py)
GR_ADD_TEST(qa_csv_reader ${PYTHON_EXECUTABLE} ${CMAKE_CURRENT_SOURCE_DIR}/qa_csv_reader.py)
GR_ADD_TEST(qa_file_sink ${PYTHON_EXECUTABLE} ${CMAKE_CURRENT_SOURCE_DIR}/qa_file_sink.py)
GR_ADD_TEST(qa_invert_tune ${PYTHON_EXECUTABLE} ${CMAKE_CURRENT_SOURCE_DIR}/qa_invert_tune.py)
GR_ADD_TEST(qa_file_source ${PYTHON_EXECUTABLE} ${CMAKE_CURRENT_SOURCE_DIR}/qa_file_source.py)
GR_ADD_TEST(qa_message_vector_file_sink ${PYTHON_EXECUTABLE} ${CMAKE_CURRENT_SOURCE_DIR}/qa_message_vector_file_sink.py)
GR_ADD_TEST(qa_message_vector_raster_file_sink ${PYTHON_EXECUTABLE} ${CMAKE_CURRENT_SOURCE_DIR}/qa_message_vector_raster_file_sink.py)
GR_ADD_TEST(qa_rftap_encap ${PYTHON_EXECUTABLE} ${CMAKE_CURRENT_SOURCE_DIR}/qa_rftap_encap.py)
GR_ADD_TEST(qa_stream_gate ${PYTHON_EXECUTABLE} ${CMAKE_CURRENT_SOURCE_DIR}/qa_stream_gate.py)
GR_ADD_TEST(qa_tag_debug_file ${PYTHON_EXECUTABLE} ${CMAKE_CURRENT_SOURCE_DIR}/qa_tag_debug_file.py)
GR_ADD_TEST(qa_sandia_tag_debug ${PYTHON_EXECUTABLE} ${CMAKE_CURRENT_SOURCE_DIR}/qa_sandia_tag_debug.py)
GR_ADD_TEST(qa_tagged_bits_to_bytes ${PYTHON_EXECUTABLE} ${CMAKE_CURRENT_SOURCE_DIR}/qa_tagged_bits_to_bytes.py)
GR_ADD_TEST(qa_compute_stats ${PYTHON_EXECUTABLE} ${CMAKE_CURRENT_SOURCE_DIR}/qa_compute_stats.py)
GR_ADD_TEST(qa_burst_power_detector ${PYTHON_EXECUTABLE} ${CMAKE_CURRENT_SOURCE_DIR}/qa_burst_power_detector.py)
GR_ADD_TEST(qa_sigmf_meta_writer ${PYTHON_EXECUTABLE} ${CMAKE_CURRENT_SOURCE_DIR}/qa_sigmf_meta_writer.py)
