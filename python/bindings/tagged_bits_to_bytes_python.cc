/*
 * Copyright 2021 Free Software Foundation, Inc.
 *
 * This file is part of GNU Radio
 *
 * SPDX-License-Identifier: GPL-3.0-or-later
 *
 */

/***********************************************************************************/
/* This file is automatically generated using bindtool and can be manually edited  */
/* The following lines can be configured to regenerate this file during cmake      */
/* If manual edits are made, the following tags should be modified accordingly.    */
/* BINDTOOL_GEN_AUTOMATIC(0)                                                       */
/* BINDTOOL_USE_PYGCCXML(0)                                                        */
/* BINDTOOL_HEADER_FILE(tagged_bits_to_bytes.h)                                        */
/* BINDTOOL_HEADER_FILE_HASH(60995d1608f97ae8eac5a69e37a6a858)                     */
/***********************************************************************************/

#include <pybind11/complex.h>
#include <pybind11/pybind11.h>
#include <pybind11/stl.h>

namespace py = pybind11;

#include <sandia_utils/tagged_bits_to_bytes.h>
// pydoc.h is automatically generated in the build directory
#include <tagged_bits_to_bytes_pydoc.h>

void bind_tagged_bits_to_bytes(py::module& m)
{

    using tagged_bits_to_bytes    = ::gr::sandia_utils::tagged_bits_to_bytes;


    py::class_<tagged_bits_to_bytes, gr::block, gr::basic_block,
        std::shared_ptr<tagged_bits_to_bytes>>(m, "tagged_bits_to_bytes", D(tagged_bits_to_bytes))

        .def(py::init(&tagged_bits_to_bytes::make),
           py::arg("key") = "BURST",
           py::arg("little_endian") = false,
           py::arg("stub_mode") = 0,
           py::arg("v_len") = 1,
           py::arg("sample_rate") = 1,
           D(tagged_bits_to_bytes,make)
        )
        




        
        .def("set_vlen",&tagged_bits_to_bytes::set_vlen,       
            py::arg("vlen"),
            D(tagged_bits_to_bytes,set_vlen)
        )


        
        .def("set_little_endian_flag",&tagged_bits_to_bytes::set_little_endian_flag,       
            py::arg("lsb_first"),
            D(tagged_bits_to_bytes,set_little_endian_flag)
        )


        
        .def("set_sample_rate",&tagged_bits_to_bytes::set_sample_rate,       
            py::arg("samp_rate"),
            D(tagged_bits_to_bytes,set_sample_rate)
        )

        ;




}








