/*
 * Copyright 2018, 2019, 2020 National Technology & Engineering Solutions of Sandia, LLC
 * (NTESS). Under the terms of Contract DE-NA0003525 with NTESS, the U.S. Government
 * retains certain rights in this software.
 *
 * SPDX-License-Identifier: GPL-3.0-or-later
 *
 */

/***********************************************************************************/
/* This file is automatically generated using bindtool and can be manually edited  */
/* The following lines can be configured to regenerate this file during cmake      */
/* If manual edits are made, the following tags should be modified accordingly.    */
/* BINDTOOL_GEN_AUTOMATIC(0)                                                       */
/* BINDTOOL_USE_PYGCCXML(0)                                                        */
/* BINDTOOL_HEADER_FILE(file_sink.h)                                        */
/* BINDTOOL_HEADER_FILE_HASH(d3aa4331c3c53279c538c785f41ded79)                     */
/***********************************************************************************/

#include <pybind11/cast.h>
#include <pybind11/complex.h>
#include <pybind11/pybind11.h>
#include <pybind11/stl.h>

namespace py = pybind11;

#include <sandia_utils/constants.h>

void bind_constants(py::module& m)
{
    m.add_object("TIME_KEY", py::cast([]() {return &::gr::sandia_utils::TIME_KEY; }, py::return_value_policy::reference));
    m.add_object("RX_TIME_KEY", py::cast([]() {return &::gr::sandia_utils::RX_TIME_KEY; }, py::return_value_policy::reference));
    m.add_object("TX_TIME_KEY", py::cast([]() {return &::gr::sandia_utils::TX_TIME_KEY; }, py::return_value_policy::reference));
    m.add_object("CMD_DIRECTION", py::cast([]() {return &::gr::sandia_utils::CMD_DIRECTION; }, py::return_value_policy::reference));
    m.add_object("CMD_RX", py::cast([]() {return &::gr::sandia_utils::CMD_RX; }, py::return_value_policy::reference));
    m.add_object("CMD_TX", py::cast([]() {return &::gr::sandia_utils::CMD_TX; }, py::return_value_policy::reference));
    m.add_object("CMD_LO_FREQ_KEY", py::cast([]() {return &::gr::sandia_utils::CMD_LO_FREQ_KEY; }, py::return_value_policy::reference));
    m.add_object("CMD_RATE_KEY", py::cast([]() {return &::gr::sandia_utils::CMD_RATE_KEY; }, py::return_value_policy::reference));
    m.add_object("CMD_BW_KEY", py::cast([]() {return &::gr::sandia_utils::CMD_BW_KEY; }, py::return_value_policy::reference));

    m.add_object("RATE_KEY", py::cast([]() {return &::gr::sandia_utils::RATE_KEY; }, py::return_value_policy::reference));
    m.add_object("FREQ_KEY", py::cast([]() {return &::gr::sandia_utils::FREQ_KEY; }, py::return_value_policy::reference));
    m.add_object("BURST_START_KEY", py::cast([]() {return &::gr::sandia_utils::BURST_START_KEY; }, py::return_value_policy::reference));
    m.add_object("BURST_STOP_KEY", py::cast([]() {return &::gr::sandia_utils::BURST_STOP_KEY; }, py::return_value_policy::reference));
    m.add_object("PDU_KEY", py::cast([]() {return &::gr::sandia_utils::PDU_KEY; }, py::return_value_policy::reference));
    m.add_object("FNAME_KEY", py::cast([]() {return &::gr::sandia_utils::FNAME_KEY; }, py::return_value_policy::reference));
    m.add_object("IN_KEY", py::cast([]() {return &::gr::sandia_utils::IN_KEY; }, py::return_value_policy::reference));
    m.add_object("OUT_KEY", py::cast([]() {return &::gr::sandia_utils::OUT_KEY; }, py::return_value_policy::reference));
    m.add_object("TUNE_KEY", py::cast([]() {return &::gr::sandia_utils::TUNE_KEY; }, py::return_value_policy::reference));

    py::enum_<::gr::sandia_utils::STUB_MODE>(m, "STUB_MODE")
        .value("DROP_STUB", gr::sandia_utils::DROP_STUB) // 0
        .value("PAD_RIGHT", gr::sandia_utils::PAD_RIGHT)   // 1
        .value("PAD_LEFT", gr::sandia_utils::PAD_LEFT)   // 1
        .export_values();


}








