/*
 * Copyright 2021 Free Software Foundation, Inc.
 *
 * This file is part of GNU Radio
 *
 * SPDX-License-Identifier: GPL-3.0-or-later
 *
 */

/***********************************************************************************/
/* This file is automatically generated using bindtool and can be manually edited  */
/* The following lines can be configured to regenerate this file during cmake      */
/* If manual edits are made, the following tags should be modified accordingly.    */
/* BINDTOOL_GEN_AUTOMATIC(0)                                                       */
/* BINDTOOL_USE_PYGCCXML(0)                                                        */
/* BINDTOOL_HEADER_FILE(file_sink.h)                                        */
/* BINDTOOL_HEADER_FILE_HASH(d3aa4331c3c53279c538c785f41ded79)                     */
/***********************************************************************************/

#include <pybind11/complex.h>
#include <pybind11/pybind11.h>
#include <pybind11/stl.h>

namespace py = pybind11;

#include <sandia_utils/file_sink.h>
// pydoc.h is automatically generated in the build directory
#include <file_sink_pydoc.h>

void bind_file_sink(py::module& m)
{

    using file_sink    = ::gr::sandia_utils::file_sink;


    py::class_<file_sink, gr::sync_block, gr::block, gr::basic_block,
        std::shared_ptr<file_sink>>(m, "file_sink", D(file_sink))

        .def(py::init(&file_sink::make),
           py::arg("data_type"),
           py::arg("itemsize"),
           py::arg("file_type"),
           py::arg("mode"),
           py::arg("nsamples"),
           py::arg("rate"),
           py::arg("out_dir"),
           py::arg("name_spec"),
           py::arg("debug") = false,
           D(file_sink,make)
        )
        




        
        .def("set_recording",&file_sink::set_recording,       
            py::arg("state"),
            D(file_sink,set_recording)
        )


        
        .def("get_recording",&file_sink::get_recording,       
            D(file_sink,get_recording)
        )


        
        .def("set_second_align",&file_sink::set_second_align,       
            py::arg("align"),
            D(file_sink,set_second_align)
        )


        
        .def("get_second_align",&file_sink::get_second_align,       
            D(file_sink,get_second_align)
        )


        
        .def("set_mode",(void (file_sink::*)(gr::sandia_utils::trigger_type_t))&file_sink::set_mode,       
            py::arg("mode"),
            D(file_sink,set_mode,0)
        )


        
        .def("get_mode",&file_sink::get_mode,       
            D(file_sink,get_mode)
        )


        
        .def("set_mode",(void (file_sink::*)(int))&file_sink::set_mode,       
            py::arg("mode"),
            D(file_sink,set_mode,1)
        )


        
        .def("set_gen_new_folder",&file_sink::set_gen_new_folder,       
            py::arg("value"),
            D(file_sink,set_gen_new_folder)
        )


        
        .def("get_gen_new_folder",&file_sink::get_gen_new_folder,       
            D(file_sink,get_gen_new_folder)
        )


        
        .def("set_freq",&file_sink::set_freq,       
            py::arg("freq"),
            D(file_sink,set_freq)
        )


        
        .def("get_freq",&file_sink::get_freq,       
            D(file_sink,get_freq)
        )


        
        .def("set_rate",&file_sink::set_rate,       
            py::arg("rate"),
            D(file_sink,set_rate)
        )


        
        .def("get_rate",&file_sink::get_rate,       
            D(file_sink,get_rate)
        )


        
        .def("set_nsamples",&file_sink::set_nsamples,       
            py::arg("nsamples"),
            D(file_sink,set_nsamples)
        )


        
        .def("get_nsamples",&file_sink::get_nsamples,       
            D(file_sink,get_nsamples)
        )


        
        .def("set_file_num_rollover",&file_sink::set_file_num_rollover,       
            py::arg("rollover"),
            D(file_sink,set_file_num_rollover)
        )


        
        .def("get_file_num_rollover",&file_sink::get_file_num_rollover,       
            D(file_sink,get_file_num_rollover)
        )

        ;

    py::enum_<::gr::sandia_utils::trigger_type_t>(m,"trigger_type_t")
        .value("MANUAL", ::gr::sandia_utils::MANUAL) // 0
        .value("TRIGGERED", ::gr::sandia_utils::TRIGGERED) // 1
        .export_values()
    ;

    py::implicitly_convertible<int, ::gr::sandia_utils::trigger_type_t>();



}








